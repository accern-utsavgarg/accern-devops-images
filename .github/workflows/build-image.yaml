on: 
  workflow_dispatch:
    inputs:
      image:
        description: 'Image to build'     
        required: true
        type: choice
        options:
        - helm
        - jumper
        - redis-backup
        - terraform
env:
  ECR_REGISTRY: 957335373174.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ${{ github.event.inputs.image }}
  FILE_PATH: ${{ github.event.inputs.image }}
jobs:
  log-the-inputs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Get current date
      id: date
      run: |
        echo "::set-output name=date::$(date +'%Y-%m-%d')"
        echo "::set-output name=VERSION::$(git describe --always --abbrev=0 --match "NOT A TAG")"
        echo "::set-output name=VERSION_READABLE::$(git describe --tag)"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and push it to ECR 
        cd $FILE_PATH
        echo $VERSION
        echo $VERSION_READABLE
        #docker build -t ${{ steps.login-ecr.outputs.registry }}/devops/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build --platform linux/amd64 -f Dockerfile --build-arg VERSION=${VERSION} --build-arg VERSION_READABLE=${VERSION_READABLE} --platform linux/amd64 ${{ steps.login-ecr.outputs.registry }}/devops/$ECR_REPOSITORY:${VERSION_READABLE}  .
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/devops/${{ github.event.inputs.image }}:${{ github.event.inputs.image_tag }}'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          output: ${{ steps.date.outputs.date }}
          severity: 'CRITICAL,HIGH'

    - name: Build, tag, and push the image to Amazon ECR
      id: push-image
      run: |
        echo "Pushing image to ECR..."
        docker push ${{ steps.login-ecr.outputs.registry }}/devops/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: logout from ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
