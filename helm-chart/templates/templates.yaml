apiVersion: v1
kind: ConfigMap
metadata:
  name: xyme-k8s-templates
data:
  xyme-worker-task.template.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: xyme-worker-task
      labels:
        app: xyme-worker
        worker: task
    spec:
      ttlSecondsAfterFinished: 100
      template:
        metadata:
          labels:
            app: xyme-worker
            worker: task
        spec:
          {{- if .Values.nodeSelector }}
          nodeSelector:
            kube/nodetype: {{ .Values.nodeSelector | quote }}
          tolerations:
            - operator: Equal
              key: dedicated
              value: {{ .Values.nodeSelector | quote }}
              effect: "NoSchedule"
          {{- end }}
          containers:
            - image: "{{ required "Provide a value for ecrUrl." .Values.ecrUrl }}/{{ required "Provide a value for imageRepo. Most likely 'xyme-backend'" .Values.imageRepo }}:worker-{{ required "Provide a value for imageTag. Most likely 'vX.X.X'" .Values.imageTag }}"
              imagePullPolicy: IfNotPresent
              name: xyme-worker-task
              env:
                - name: TASK_TYPE
                  value: node:cpusmall
                - name: IS_VERSION_OVERRIDE
                  value: "false"
                - name: IMAGE_TAG
                  value: {{ .Values.imageTag }}
                - name: IMAGE_REPO
                  value: {{ .Values.imageRepo }}
              envFrom:
                - configMapRef:
                    name: xyme-config
              ports:
                - name: prometheus
                  containerPort: 9090
                  protocol: TCP
              volumeMounts:
                - name: nfs
                  mountPath: /mnt/
                  subPath: "system/{{ .Release.Namespace }}/accern/{{ .Values.efsMount | default "xyme" }}"
                - name: xyme-k8s-templates
                  mountPath: /xyme/deploys/k8s/xyme-worker-queue.template.yaml
                  subPath: xyme-worker-queue.template.yaml
                - name: xyme-k8s-templates
                  mountPath: /xyme/deploys/k8s/xyme-worker-task.template.yaml
                  subPath: xyme-worker-task.template.yaml
                - name: xyme-backend
                  mountPath: /xyme/xyme-backend
                - name: xyme-license
                  mountPath: /xyme/xyme-license
                - name: cache
                  mountPath: /cache
              resources:
                limits:
                  cpu: "2"
                  memory: "8Gi"
                requests:
                  cpu: "1"
                  memory: "6Gi"
          volumes:
            - name: xyme-k8s-templates
              configMap:
                name: xyme-k8s-templates
            - name: xyme-backend
              configMap:
                name: xyme-backend
            - name: xyme-license
              configMap:
                name: xyme-license
            - name: nfs
              persistentVolumeClaim:
                claimName: {{ .Values.efsClaim }}
            - name: cache
              emptyDir:
                medium: Memory
          restartPolicy: OnFailure
          serviceAccountName: xyme-service

  xyme-worker-queue.template.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: xyme-worker-queue
      labels:
        app: xyme-worker
        worker: queue
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: xyme-worker
          worker: queue
      template:
        metadata:
          labels:
            app: xyme-worker
            worker: queue
        spec:
          {{- if .Values.nodeSelector }}
          nodeSelector:
            kube/nodetype: {{ .Values.nodeSelector | quote }}
          tolerations:
            - operator: Equal
              key: dedicated
              value: {{ .Values.nodeSelector | quote }}
              effect: "NoSchedule"
          {{- end }}
          containers:
            - name: xyme-worker-queue
              image: "{{ required "Provide a value for ecrUrl." .Values.ecrUrl }}/{{ required "Provide a value for imageRepo. Most likely 'xyme-backend'" .Values.imageRepo }}:worker-{{ required "Provide a value for imageTag. Most likely 'vX.X.X'" .Values.imageTag }}"
              imagePullPolicy: IfNotPresent
              env:
                - name: IS_VERSION_OVERRIDE
                  value: "false"
                - name: IMAGE_TAG
                  value: {{ .Values.imageTag }}
                - name: IMAGE_REPO
                  value: {{ .Values.imageRepo }}
              envFrom:
                - configMapRef:
                    name: xyme-config
              ports:
                - name: prometheus
                  containerPort: 9090
                  protocol: TCP
              volumeMounts:
                - name: nfs
                  mountPath: /mnt/
                  subPath: "system/{{ .Release.Namespace }}/accern/{{ .Values.efsMount | default "xyme" }}"
                - name: xyme-k8s-templates
                  mountPath: /xyme/deploys/k8s/xyme-worker-queue.template.yaml
                  subPath: xyme-worker-queue.template.yaml
                - name: xyme-k8s-templates
                  mountPath: /xyme/deploys/k8s/xyme-worker-task.template.yaml
                  subPath: xyme-worker-task.template.yaml
                - name: xyme-backend
                  mountPath: /xyme/xyme-backend
                - name: xyme-license
                  mountPath: /xyme/xyme-license
                - name: cache
                  mountPath: /cache
              resources:
                limits:
                  cpu: "4"
                  memory: "8Gi"
                requests:
                  cpu: "3"
                  memory: "7.5Gi"
          volumes:
            - name: xyme-k8s-templates
              configMap:
                name: xyme-k8s-templates
            - name: xyme-backend
              configMap:
                name: xyme-backend
            - name: xyme-license
              configMap:
                name: xyme-license
            - name: nfs
              persistentVolumeClaim:
                claimName: {{ .Values.efsClaim }}
            - name: cache
              emptyDir:
                medium: Memory
          serviceAccountName: xyme-service
